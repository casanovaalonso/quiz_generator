import gradio as gr
import requests
import json

# API endpoint URL (adjust if your Flask app is hosted elsewhere)
API_URL = "http://localhost:5000/generate-quiz"


def generate_quiz(learning_objective, num_questions):
    """
    Function to call the Flask API and format the response for Gradio.

    Args:
        learning_objective (str): The learning objective input by the user.
        num_questions (int): The number of questions to generate.

    Returns:
        str: Formatted quiz questions or error message.
    """
    # Validate inputs
    if not learning_objective.strip():
        return "Error: Please provide a learning objective."
    try:
        num_questions = int(num_questions)
        if num_questions < 1 or num_questions > 10:
            return "Error: Number of questions must be between 1 and 10."
    except ValueError:
        return "Error: Number of questions must be an integer."

    # Prepare the payload for the API
    payload = {"learning_objective": learning_objective, "num_questions": num_questions}

    try:
        # Send POST request to the Flask API
        response = requests.post(
            API_URL, json=payload, headers={"Content-Type": "application/json"}
        )
        response.raise_for_status()  # Raise an exception for bad status codes

        # Parse the JSON response
        quiz_data = response.json()
        if "error" in quiz_data:
            return f"Error from API: {quiz_data['error']}"

        questions = quiz_data.get("questions", [])
        if not questions:
            return "No questions generated by the API."

        # Format the quiz questions for display
        output = "Generated Quiz Questions:\n\n"
        for i, q in enumerate(questions, 1):
            output += f"**Question {i}: {q['question']}**\n"
            output += "Options:\n"
            for key, value in q["options"].items():
                output += f"  {key}) {value}\n"
            output += f"Correct Answer: {q['correct_answer']}\n"
            output += f"Explanation: {q['explanation']}\n\n"

        return output

    except requests.exceptions.RequestException as e:
        return f"Error connecting to the API: {str(e)}"
    except json.JSONDecodeError:
        return "Error: Invalid response format from the API."
    except Exception as e:
        return f"Unexpected error: {str(e)}"


# Create the Gradio interface
with gr.Blocks(title="Quiz Generator") as demo:
    gr.Markdown("# Quiz Generator")
    gr.Markdown(
        "Enter a learning objective and the number of questions to generate a university-level quiz."
    )

    # Input components
    with gr.Row():
        learning_objective_input = gr.Textbox(
            label="Learning Objective",
            placeholder="e.g., Balance chemical equations using the law of conservation of mass",
            lines=2,
        )
        num_questions_input = gr.Number(
            label="Number of Questions",
            value=2,
            minimum=1,
            maximum=10,
            step=1,
            precision=0,
        )

    # Submit button
    submit_button = gr.Button("Generate Quiz")

    # Output component
    output_display = gr.Markdown(label="Generated Quiz")

    # Connect the button to the function
    submit_button.click(
        fn=generate_quiz,
        inputs=[learning_objective_input, num_questions_input],
        outputs=output_display,
    )

    # Add a clear button for convenience
    clear_button = gr.Button("Clear")
    clear_button.click(
        fn=lambda: ("", 2, ""),
        inputs=None,
        outputs=[learning_objective_input, num_questions_input, output_display],
    )

# Launch the interface
demo.launch()
