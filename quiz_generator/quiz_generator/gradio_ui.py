import gradio as gr
import requests
import json
import time

API_URL = "http://localhost:5000/generate-quiz"


def generate_quiz_stream(learning_objective, num_questions):
    """
    Generator function to provide immediate feedback while the LLM is 'thinking'.
    """
    # First, immediately yield a "thinking" message
    yield "## Thinking...\n\nPlease wait while we generate your quiz."

    # (Optional) Sleep here just to simulate a delay; in reality, your request might take time anyway
    time.sleep(1)

    # Now run your usual logic
    if not learning_objective.strip():
        yield "Error: Please provide a learning objective."
        return  # Stop the generator
    try:
        num_questions = int(num_questions)
        if num_questions < 1 or num_questions > 10:
            yield "Error: Number of questions must be between 1 and 10."
            return
    except ValueError:
        yield "Error: Number of questions must be an integer."
        return

    # Prepare the payload
    payload = {"learning_objective": learning_objective, "num_questions": num_questions}

    try:
        # Make the request to your Flask API
        response = requests.post(
            API_URL, json=payload, headers={"Content-Type": "application/json"}
        )
        response.raise_for_status()
        quiz_data = response.json()

        if "error" in quiz_data:
            yield f"Error from API: {quiz_data['error']}"
            return

        questions = quiz_data.get("questions", [])
        if not questions:
            yield "No questions generated by the API."
            return

        # Format the quiz as Markdown with collapsible <details> sections
        output = "## Generated Quiz Questions\n\n"
        for i, q in enumerate(questions, 1):
            output += (
                f"<details>\n"
                f"<summary><b>Question {i}: {q['question']}</b></summary>\n\n"
                f"**Options:**\n"
                f"- a) {q['options']['a']}\n"
                f"- b) {q['options']['b']}\n"
                f"- c) {q['options']['c']}\n"
                f"- d) {q['options']['d']}\n\n"
                f"**Correct Answer:** {q['correct_answer']}\n\n"
                f"**Explanation:** {q['explanation']}\n"
                "</details>\n\n"
            )
        # Finally, yield the completed quiz
        yield output

    except requests.exceptions.RequestException as e:
        yield f"Error connecting to the API: {str(e)}"
    except json.JSONDecodeError:
        yield "Error: Invalid response format from the API."
    except Exception as e:
        yield f"Unexpected error: {str(e)}"


with gr.Blocks(title="Quiz Generator with Thinking Indicator") as demo:
    gr.Markdown("# Quiz Generator")
    gr.Markdown(
        "Enter a learning objective and the number of questions to generate "
        "a university-level quiz. You will see a 'Thinking...' message while the LLM processes."
    )

    with gr.Row():
        learning_objective_input = gr.Textbox(
            label="Learning Objective",
            placeholder="e.g., Balance chemical equations using the law of conservation of mass",
            lines=2,
        )
        num_questions_input = gr.Number(
            label="Number of Questions",
            value=2,
            minimum=1,
            maximum=10,
            step=1,
            precision=0,
        )

    submit_button = gr.Button("Generate Quiz", variant="primary")

    with gr.Accordion("Click to Expand/Collapse Quiz Results", open=True):
        output_display = gr.Markdown(
            label="Generated Quiz", value="Your quiz will appear here."
        )

    # IMPORTANT: queue=True to allow streaming from the generator
    submit_button.click(
        fn=generate_quiz_stream,
        inputs=[learning_objective_input, num_questions_input],
        outputs=output_display,
        queue=True,
    )

    clear_button = gr.Button("Clear", variant="secondary")
    clear_button.click(
        fn=lambda: ("", 2, "Your quiz will appear here."),
        inputs=None,
        outputs=[learning_objective_input, num_questions_input, output_display],
    )

demo.launch()
